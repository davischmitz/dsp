
DSP_Exemple_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec4  08004ec4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec4  08004ec4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000160  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129b1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227f  00000000  00000000  000329ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00034c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e80  00000000  00000000  00035bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f34  00000000  00000000  00036a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012755  00000000  00000000  0005797c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9e94  00000000  00000000  0006a0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133f65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004150  00000000  00000000  00133fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e60 	.word	0x08004e60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e60 	.word	0x08004e60

080001c8 <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001cc:	f000 fb7c 	bl	80008c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d0:	f000 f818 	bl	8000204 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d4:	f000 f9a6 	bl	8000524 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80001d8:	f000 f972 	bl	80004c0 <MX_USART2_UART_Init>
	MX_DAC1_Init();
 80001dc:	f000 f8f0 	bl	80003c0 <MX_DAC1_Init>
	MX_ADC1_Init();
 80001e0:	f000 f884 	bl	80002ec <MX_ADC1_Init>
	MX_TIM3_Init();
 80001e4:	f000 f91a 	bl	800041c <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80001e8:	f000 f86c 	bl	80002c4 <MX_NVIC_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_TIM_Base_Start_IT(&htim3);
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <main+0x34>)
 80001ee:	f003 fc5b 	bl	8003aa8 <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80001f2:	2100      	movs	r1, #0
 80001f4:	4802      	ldr	r0, [pc, #8]	; (8000200 <main+0x38>)
 80001f6:	f001 fe55 	bl	8001ea4 <HAL_DAC_Start>
	while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x32>
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	20000078 	.word	0x20000078

08000204 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8000212:	2310      	movs	r3, #16
 8000214:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800021a:	2300      	movs	r3, #0
 800021c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800021e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000222:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000228:	4618      	mov	r0, r3
 800022a:	f002 f893 	bl	8002354 <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d003      	beq.n	800023c <SystemClock_Config+0x38>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000234:	21a6      	movs	r1, #166	; 0xa6
 8000236:	4821      	ldr	r0, [pc, #132]	; (80002bc <SystemClock_Config+0xb8>)
 8000238:	f000 fa06 	bl	8000648 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000240:	2302      	movs	r3, #2
 8000242:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2102      	movs	r1, #2
 8000258:	4618      	mov	r0, r3
 800025a:	f003 f8b9 	bl	80033d0 <HAL_RCC_ClockConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d003      	beq.n	800026c <SystemClock_Config+0x68>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000264:	21b4      	movs	r1, #180	; 0xb4
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <SystemClock_Config+0xb8>)
 8000268:	f000 f9ee 	bl	8000648 <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000274:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	463b      	mov	r3, r7
 8000278:	4618      	mov	r0, r3
 800027a:	f003 fadf 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d003      	beq.n	800028c <SystemClock_Config+0x88>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000284:	21bb      	movs	r1, #187	; 0xbb
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <SystemClock_Config+0xb8>)
 8000288:	f000 f9de 	bl	8000648 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800028c:	f003 fa86 	bl	800379c <HAL_RCC_GetHCLKFreq>
 8000290:	4603      	mov	r3, r0
 8000292:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <SystemClock_Config+0xbc>)
 8000294:	fba2 2303 	umull	r2, r3, r2, r3
 8000298:	099b      	lsrs	r3, r3, #6
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fd85 	bl	8001daa <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002a0:	2004      	movs	r0, #4
 80002a2:	f001 fd8f 	bl	8001dc4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2100      	movs	r1, #0
 80002aa:	f04f 30ff 	mov.w	r0, #4294967295
 80002ae:	f001 fd52 	bl	8001d56 <HAL_NVIC_SetPriority>
}
 80002b2:	bf00      	nop
 80002b4:	3758      	adds	r7, #88	; 0x58
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	08004e78 	.word	0x08004e78
 80002c0:	10624dd3 	.word	0x10624dd3

080002c4 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	/* ADC1_2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2100      	movs	r1, #0
 80002cc:	2012      	movs	r0, #18
 80002ce:	f001 fd42 	bl	8001d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80002d2:	2012      	movs	r0, #18
 80002d4:	f001 fd5b 	bl	8001d8e <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80002d8:	2200      	movs	r2, #0
 80002da:	2100      	movs	r1, #0
 80002dc:	201d      	movs	r0, #29
 80002de:	f001 fd3a 	bl	8001d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80002e2:	201d      	movs	r0, #29
 80002e4:	f001 fd53 	bl	8001d8e <HAL_NVIC_EnableIRQ>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode;
	ADC_ChannelConfTypeDef sConfig;

	/**Common config
	 */
	hadc1.Instance = ADC1;
 80002f2:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <MX_ADC1_Init+0xcc>)
 80002f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002fa:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <MX_ADC1_Init+0xcc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000300:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800030c:	4b2a      	ldr	r3, [pc, #168]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800030e:	2200      	movs	r2, #0
 8000310:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000314:	2200      	movs	r2, #0
 8000316:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800031c:	2200      	movs	r2, #0
 800031e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000322:	2201      	movs	r2, #1
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000326:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800032c:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800032e:	2201      	movs	r2, #1
 8000330:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000332:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800033c:	2204      	movs	r2, #4
 800033e:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000342:	2200      	movs	r2, #0
 8000344:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_ADC1_Init+0xcc>)
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034c:	481a      	ldr	r0, [pc, #104]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800034e:	f000 fb35 	bl	80009bc <HAL_ADC_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d003      	beq.n	8000360 <MX_ADC1_Init+0x74>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000358:	21f1      	movs	r1, #241	; 0xf1
 800035a:	4818      	ldr	r0, [pc, #96]	; (80003bc <MX_ADC1_Init+0xd0>)
 800035c:	f000 f974 	bl	8000648 <_Error_Handler>
	}

	/**Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	4619      	mov	r1, r3
 800036a:	4813      	ldr	r0, [pc, #76]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800036c:	f001 fa88 	bl	8001880 <HAL_ADCEx_MultiModeConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d003      	beq.n	800037e <MX_ADC1_Init+0x92>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000376:	21f9      	movs	r1, #249	; 0xf9
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <MX_ADC1_Init+0xd0>)
 800037a:	f000 f965 	bl	8000648 <_Error_Handler>
	}

	/**Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800037e:	2301      	movs	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000382:	2301      	movs	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <MX_ADC1_Init+0xcc>)
 800039c:	f000 ffb0 	bl	8001300 <HAL_ADC_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d004      	beq.n	80003b0 <MX_ADC1_Init+0xc4>
	{
		_Error_Handler(__FILE__, __LINE__);
 80003a6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80003aa:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_ADC1_Init+0xd0>)
 80003ac:	f000 f94c 	bl	8000648 <_Error_Handler>
	}

}
 80003b0:	bf00      	nop
 80003b2:	3728      	adds	r7, #40	; 0x28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	08004e78 	.word	0x08004e78

080003c0 <MX_DAC1_Init>:

/* DAC1 init function */
static void MX_DAC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0

	DAC_ChannelConfTypeDef sConfig;

	/**DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_DAC1_Init+0x50>)
 80003c8:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_DAC1_Init+0x54>)
 80003ca:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003cc:	4810      	ldr	r0, [pc, #64]	; (8000410 <MX_DAC1_Init+0x50>)
 80003ce:	f001 fd22 	bl	8001e16 <HAL_DAC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d004      	beq.n	80003e2 <MX_DAC1_Init+0x22>
	{
		_Error_Handler(__FILE__, __LINE__);
 80003d8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80003dc:	480e      	ldr	r0, [pc, #56]	; (8000418 <MX_DAC1_Init+0x58>)
 80003de:	f000 f933 	bl	8000648 <_Error_Handler>
	}

	/**DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	4807      	ldr	r0, [pc, #28]	; (8000410 <MX_DAC1_Init+0x50>)
 80003f2:	f001 fda3 	bl	8001f3c <HAL_DAC_ConfigChannel>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d004      	beq.n	8000406 <MX_DAC1_Init+0x46>
	{
		_Error_Handler(__FILE__, __LINE__);
 80003fc:	f240 111f 	movw	r1, #287	; 0x11f
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_DAC1_Init+0x58>)
 8000402:	f000 f921 	bl	8000648 <_Error_Handler>
	}

}
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000078 	.word	0x20000078
 8000414:	40007400 	.word	0x40007400
 8000418:	08004e78 	.word	0x08004e78

0800041c <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	htim3.Instance = TIM3;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_TIM3_Init+0x98>)
 8000424:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <MX_TIM3_Init+0x9c>)
 8000426:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_TIM3_Init+0x98>)
 800042a:	2264      	movs	r2, #100	; 0x64
 800042c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_TIM3_Init+0x98>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 64;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_TIM3_Init+0x98>)
 8000436:	2240      	movs	r2, #64	; 0x40
 8000438:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_TIM3_Init+0x98>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_TIM3_Init+0x98>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000446:	481b      	ldr	r0, [pc, #108]	; (80004b4 <MX_TIM3_Init+0x98>)
 8000448:	f003 fb8a 	bl	8003b60 <HAL_TIM_OC_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d004      	beq.n	800045c <MX_TIM3_Init+0x40>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000452:	f240 1133 	movw	r1, #307	; 0x133
 8000456:	4819      	ldr	r0, [pc, #100]	; (80004bc <MX_TIM3_Init+0xa0>)
 8000458:	f000 f8f6 	bl	8000648 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000464:	f107 031c 	add.w	r3, r7, #28
 8000468:	4619      	mov	r1, r3
 800046a:	4812      	ldr	r0, [pc, #72]	; (80004b4 <MX_TIM3_Init+0x98>)
 800046c:	f004 f8ae 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d004      	beq.n	8000480 <MX_TIM3_Init+0x64>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000476:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800047a:	4810      	ldr	r0, [pc, #64]	; (80004bc <MX_TIM3_Init+0xa0>)
 800047c:	f000 f8e4 	bl	8000648 <_Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000480:	2300      	movs	r3, #0
 8000482:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <MX_TIM3_Init+0x98>)
 8000498:	f003 fcd8 	bl	8003e4c <HAL_TIM_OC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d004      	beq.n	80004ac <MX_TIM3_Init+0x90>
	{
		_Error_Handler(__FILE__, __LINE__);
 80004a2:	f240 1143 	movw	r1, #323	; 0x143
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_TIM3_Init+0xa0>)
 80004a8:	f000 f8ce 	bl	8000648 <_Error_Handler>
	}

}
 80004ac:	bf00      	nop
 80004ae:	3728      	adds	r7, #40	; 0x28
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000008c 	.word	0x2000008c
 80004b8:	40000400 	.word	0x40000400
 80004bc:	08004e78 	.word	0x08004e78

080004c0 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004c6:	4a15      	ldr	r2, [pc, #84]	; (800051c <MX_USART2_UART_Init+0x5c>)
 80004c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004d0:	605a      	str	r2, [r3, #4]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004e0:	220c      	movs	r2, #12
 80004e2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <MX_USART2_UART_Init+0x58>)
 80004fe:	f004 f8f1 	bl	80046e4 <HAL_UART_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d004      	beq.n	8000512 <MX_USART2_UART_Init+0x52>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000508:	f240 1157 	movw	r1, #343	; 0x157
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <MX_USART2_UART_Init+0x60>)
 800050e:	f000 f89b 	bl	8000648 <_Error_Handler>
	}

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000d8 	.word	0x200000d8
 800051c:	40004400 	.word	0x40004400
 8000520:	08004e78 	.word	0x08004e78

08000524 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_GPIO_Init+0xb4>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xb4>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_GPIO_Init+0xb4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fead 	bl	80022f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_GPIO_Init+0xb8>)
 80005ac:	f001 fd2e 	bl	800200c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80005b0:	2320      	movs	r3, #32
 80005b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f001 fd1f 	bl	800200c <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000800 	.word	0x48000800

080005e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80005ea:	f000 fb79 	bl	8000ce0 <HAL_ADC_Start_IT>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028

080005fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000604:	2120      	movs	r1, #32
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f001 fe89 	bl	8002320 <HAL_GPIO_TogglePin>
	g_ADCValue = HAL_ADC_GetValue(&hadc1);
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000610:	f000 fc46 	bl	8000ea0 <HAL_ADC_GetValue>
 8000614:	4603      	mov	r3, r0
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <HAL_ADC_ConvCpltCallback+0x40>)
 8000618:	6013      	str	r3, [r2, #0]
	//colocar filtro
	g_DACValue = g_ADCValue;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_ADC_ConvCpltCallback+0x40>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_ADC_ConvCpltCallback+0x44>)
 8000620:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,g_DACValue);
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_ADC_ConvCpltCallback+0x44>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_ADC_ConvCpltCallback+0x48>)
 800062c:	f001 fc15 	bl	8001e5a <HAL_DAC_SetValue>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000028 	.word	0x20000028
 800063c:	20000160 	.word	0x20000160
 8000640:	20000164 	.word	0x20000164
 8000644:	20000078 	.word	0x20000078

08000648 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 8000652:	e7fe      	b.n	8000652 <_Error_Handler+0xa>

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <HAL_MspInit+0x80>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <HAL_MspInit+0x80>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_MspInit+0x80>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000672:	2007      	movs	r0, #7
 8000674:	f001 fb64 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	f06f 000b 	mvn.w	r0, #11
 8000680:	f001 fb69 	bl	8001d56 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	f06f 000a 	mvn.w	r0, #10
 800068c:	f001 fb63 	bl	8001d56 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	f06f 0009 	mvn.w	r0, #9
 8000698:	f001 fb5d 	bl	8001d56 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	f06f 0004 	mvn.w	r0, #4
 80006a4:	f001 fb57 	bl	8001d56 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	f06f 0003 	mvn.w	r0, #3
 80006b0:	f001 fb51 	bl	8001d56 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	f06f 0001 	mvn.w	r0, #1
 80006bc:	f001 fb4b 	bl	8001d56 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f001 fb45 	bl	8001d56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006e8:	d118      	bne.n	800071c <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_ADC_MspInit+0x4c>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0x4c>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_ADC_MspInit+0x4c>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000702:	2301      	movs	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4619      	mov	r1, r3
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f001 fc78 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_DAC_MspInit+0x4c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d118      	bne.n	800076c <HAL_DAC_MspInit+0x44>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_DAC_MspInit+0x50>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_DAC_MspInit+0x50>)
 8000740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_DAC_MspInit+0x50>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000752:	2310      	movs	r3, #16
 8000754:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000756:	2303      	movs	r3, #3
 8000758:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f001 fc50 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40007400 	.word	0x40007400
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_TIM_OC_MspInit>:
  }

}

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM3)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_TIM_OC_MspInit+0x38>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d10b      	bne.n	80007a6 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_TIM_OC_MspInit+0x3c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <HAL_TIM_OC_MspInit+0x3c>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_TIM_OC_MspInit+0x3c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40000400 	.word	0x40000400
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <HAL_UART_MspInit+0x54>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d11c      	bne.n	8000808 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_UART_MspInit+0x58>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_UART_MspInit+0x58>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_UART_MspInit+0x58>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e6:	230c      	movs	r3, #12
 80007e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f6:	2307      	movs	r3, #7
 80007f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f001 fc02 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40004400 	.word	0x40004400
 8000814:	40021000 	.word	0x40021000

08000818 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f89a 	bl	8000954 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000820:	f001 faec 	bl	8001dfc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <ADC1_2_IRQHandler+0x10>)
 800082e:	f000 fb45 	bl	8000ebc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000028 	.word	0x20000028

0800083c <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM3_IRQHandler+0x10>)
 8000842:	f003 f9e4 	bl	8003c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000008c 	.word	0x2000008c

08000850 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000878:	f7ff ffea 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f004 fab9 	bl	8004e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a6:	f7ff fc8f 	bl	80001c8 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	08004ecc 	.word	0x08004ecc
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	2000016c 	.word	0x2000016c

080008c4 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <BusFault_Handler>
	...

080008c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f001 fa31 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff feb6 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fa49 	bl	8001daa <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f001 fa11 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	20000168 	.word	0x20000168

0800097c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000168 	.word	0x20000168

08000994 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09a      	sub	sp, #104	; 0x68
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009ca:	2300      	movs	r3, #0
 80009cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e172      	b.n	8000cc2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d176      	bne.n	8000adc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d152      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fe61 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d13b      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f001 f855 	bl	8001ad4 <ADC_Disable>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12f      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
 8000a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d12b      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	f043 0202 	orr.w	r2, r3, #2
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a66:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a76:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a78:	4b94      	ldr	r3, [pc, #592]	; (8000ccc <HAL_ADC_Init+0x310>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <HAL_ADC_Init+0x314>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9a      	lsrs	r2, r3, #18
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8e:	e002      	b.n	8000a96 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f9      	bne.n	8000a90 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab8:	d110      	bne.n	8000adc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f023 0312 	bic.w	r3, r3, #18
 8000ac2:	f043 0210 	orr.w	r2, r3, #16
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f043 0201 	orr.w	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f040 80df 	bne.w	8000ca8 <HAL_ADC_Init+0x2ec>
 8000aea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 80da 	bne.w	8000ca8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 80d2 	bne.w	8000ca8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b0c:	f043 0202 	orr.w	r2, r3, #2
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b14:	4b6f      	ldr	r3, [pc, #444]	; (8000cd4 <HAL_ADC_Init+0x318>)
 8000b16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b20:	d102      	bne.n	8000b28 <HAL_ADC_Init+0x16c>
 8000b22:	4b6d      	ldr	r3, [pc, #436]	; (8000cd8 <HAL_ADC_Init+0x31c>)
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e002      	b.n	8000b2e <HAL_ADC_Init+0x172>
 8000b28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b2c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <HAL_ADC_Init+0x192>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_ADC_Init+0x192>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <HAL_ADC_Init+0x194>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d11c      	bne.n	8000b8e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b54:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d010      	beq.n	8000b7c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d107      	bne.n	8000b76 <HAL_ADC_Init+0x1ba>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <HAL_ADC_Init+0x1ba>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <HAL_ADC_Init+0x1bc>
 8000b76:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d108      	bne.n	8000b8e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b8c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7e5b      	ldrb	r3, [r3, #25]
 8000b92:	035b      	lsls	r3, r3, #13
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b98:	2a01      	cmp	r2, #1
 8000b9a:	d002      	beq.n	8000ba2 <HAL_ADC_Init+0x1e6>
 8000b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba0:	e000      	b.n	8000ba4 <HAL_ADC_Init+0x1e8>
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d11b      	bne.n	8000bfa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7e5b      	ldrb	r3, [r3, #25]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d109      	bne.n	8000bde <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	045a      	lsls	r2, r3, #17
 8000bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bda:	663b      	str	r3, [r7, #96]	; 0x60
 8000bdc:	e00d      	b.n	8000bfa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000be6:	f043 0220 	orr.w	r2, r3, #32
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f043 0201 	orr.w	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d007      	beq.n	8000c12 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d114      	bne.n	8000c4a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c2e:	f023 0302 	bic.w	r3, r3, #2
 8000c32:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7e1b      	ldrb	r3, [r3, #24]
 8000c38:	039a      	lsls	r2, r3, #14
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c46:	4313      	orrs	r3, r2
 8000c48:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_ADC_Init+0x320>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d10c      	bne.n	8000c80 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f023 010f 	bic.w	r1, r3, #15
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c7e:	e007      	b.n	8000c90 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 020f 	bic.w	r2, r2, #15
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	e00a      	b.n	8000cbe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f023 0312 	bic.w	r3, r3, #18
 8000cb0:	f043 0210 	orr.w	r2, r3, #16
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3768      	adds	r7, #104	; 0x68
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	50000300 	.word	0x50000300
 8000cd8:	50000100 	.word	0x50000100
 8000cdc:	fff0c007 	.word	0xfff0c007

08000ce0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 80c6 	bne.w	8000e88 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Start_IT+0x2a>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e0c1      	b.n	8000e8e <HAL_ADC_Start_IT+0x1ae>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 fe7a 	bl	8001a0c <ADC_Enable>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 80ad 	bne.w	8000e7e <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d38:	4b57      	ldr	r3, [pc, #348]	; (8000e98 <HAL_ADC_Start_IT+0x1b8>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d004      	beq.n	8000d4e <HAL_ADC_Start_IT+0x6e>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d4c:	d115      	bne.n	8000d7a <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d027      	beq.n	8000db8 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d78:	e01e      	b.n	8000db8 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d8e:	d004      	beq.n	8000d9a <HAL_ADC_Start_IT+0xba>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a41      	ldr	r2, [pc, #260]	; (8000e9c <HAL_ADC_Start_IT+0x1bc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <HAL_ADC_Start_IT+0xd8>
 8000d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dc4:	d106      	bne.n	8000dd4 <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f023 0206 	bic.w	r2, r3, #6
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8000dd2:	e002      	b.n	8000dda <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	221c      	movs	r2, #28
 8000de8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d110      	bne.n	8000e14 <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0204 	bic.w	r2, r2, #4
 8000e00:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0208 	orr.w	r2, r2, #8
 8000e10:	605a      	str	r2, [r3, #4]
          break;
 8000e12:	e008      	b.n	8000e26 <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 020c 	orr.w	r2, r2, #12
 8000e22:	605a      	str	r2, [r3, #4]
          break;
 8000e24:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d107      	bne.n	8000e3e <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0210 	bic.w	r2, r2, #16
 8000e3c:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_ADC_Start_IT+0x1b8>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d010      	beq.n	8000e6c <HAL_ADC_Start_IT+0x18c>
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_Start_IT+0x1b8>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d00a      	beq.n	8000e6c <HAL_ADC_Start_IT+0x18c>
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_ADC_Start_IT+0x1b8>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	2b09      	cmp	r3, #9
 8000e60:	d004      	beq.n	8000e6c <HAL_ADC_Start_IT+0x18c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e6a:	d10f      	bne.n	8000e8c <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0204 	orr.w	r2, r2, #4
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	e006      	b.n	8000e8c <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e86:	e001      	b.n	8000e8c <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	50000300 	.word	0x50000300
 8000e9c:	50000100 	.word	0x50000100

08000ea0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <HAL_ADC_IRQHandler+0x38>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d076      	beq.n	8000fec <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d071      	beq.n	8000fec <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f20:	4b82      	ldr	r3, [pc, #520]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d010      	beq.n	8000f4e <HAL_ADC_IRQHandler+0x92>
 8000f2c:	4b7f      	ldr	r3, [pc, #508]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d00a      	beq.n	8000f4e <HAL_ADC_IRQHandler+0x92>
 8000f38:	4b7c      	ldr	r3, [pc, #496]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	d004      	beq.n	8000f4e <HAL_ADC_IRQHandler+0x92>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f4c:	d104      	bne.n	8000f58 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
 8000f56:	e003      	b.n	8000f60 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000f58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d137      	bne.n	8000fde <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d132      	bne.n	8000fde <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d02d      	beq.n	8000fde <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d11a      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020c 	bic.w	r2, r2, #12
 8000f9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d112      	bne.n	8000fde <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc4:	e00b      	b.n	8000fde <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f043 0210 	orr.w	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fb0c 	bl	80005fc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	220c      	movs	r2, #12
 8000fea:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f003 0320 	and.w	r3, r3, #32
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <HAL_ADC_IRQHandler+0x144>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 80a5 	beq.w	8001156 <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 809f 	beq.w	8001156 <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001024:	4b41      	ldr	r3, [pc, #260]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	2b00      	cmp	r3, #0
 800102e:	d010      	beq.n	8001052 <HAL_ADC_IRQHandler+0x196>
 8001030:	4b3e      	ldr	r3, [pc, #248]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	2b05      	cmp	r3, #5
 800103a:	d00a      	beq.n	8001052 <HAL_ADC_IRQHandler+0x196>
 800103c:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	2b09      	cmp	r3, #9
 8001046:	d004      	beq.n	8001052 <HAL_ADC_IRQHandler+0x196>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001050:	d104      	bne.n	800105c <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	e003      	b.n	8001064 <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800105c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d16a      	bne.n	8001148 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001086:	2b00      	cmp	r3, #0
 8001088:	d15e      	bne.n	8001148 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001090:	2b00      	cmp	r3, #0
 8001092:	d159      	bne.n	8001148 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109a:	2b00      	cmp	r3, #0
 800109c:	d054      	beq.n	8001148 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d010      	beq.n	80010cc <HAL_ADC_IRQHandler+0x210>
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d00a      	beq.n	80010cc <HAL_ADC_IRQHandler+0x210>
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_ADC_IRQHandler+0x270>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2b07      	cmp	r3, #7
 80010c0:	d004      	beq.n	80010cc <HAL_ADC_IRQHandler+0x210>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ca:	d104      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e003      	b.n	80010de <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d12f      	bne.n	8001148 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d11c      	bne.n	8001130 <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001104:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d114      	bne.n	8001148 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
 800112a:	e00d      	b.n	8001148 <HAL_ADC_IRQHandler+0x28c>
 800112c:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f043 0210 	orr.w	r2, r3, #16
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f8b1 	bl	80012b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2260      	movs	r2, #96	; 0x60
 8001154:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115c:	2b00      	cmp	r3, #0
 800115e:	d011      	beq.n	8001184 <HAL_ADC_IRQHandler+0x2c8>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00c      	beq.n	8001184 <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fc0c 	bl	8000994 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d012      	beq.n	80011b4 <HAL_ADC_IRQHandler+0x2f8>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00d      	beq.n	80011b4 <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f897 	bl	80012d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d012      	beq.n	80011e4 <HAL_ADC_IRQHandler+0x328>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00d      	beq.n	80011e4 <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f889 	bl	80012ec <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03b      	beq.n	8001266 <HAL_ADC_IRQHandler+0x3aa>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d036      	beq.n	8001266 <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	e019      	b.n	800123a <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <HAL_ADC_IRQHandler+0x3f0>)
 8001208:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b01      	cmp	r3, #1
 8001222:	d10a      	bne.n	800123a <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e007      	b.n	800123a <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10e      	bne.n	800125e <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f043 0202 	orr.w	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fba5 	bl	80009a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2210      	movs	r2, #16
 8001264:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	2b00      	cmp	r3, #0
 800126e:	d018      	beq.n	80012a2 <HAL_ADC_IRQHandler+0x3e6>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	2b00      	cmp	r3, #0
 8001278:	d013      	beq.n	80012a2 <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f043 0208 	orr.w	r2, r3, #8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f811 	bl	80012c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	50000300 	.word	0x50000300

080012b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001300:	b480      	push	{r7}
 8001302:	b09b      	sub	sp, #108	; 0x6c
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x22>
 800131e:	2302      	movs	r3, #2
 8001320:	e2a4      	b.n	800186c <HAL_ADC_ConfigChannel+0x56c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 8288 	bne.w	800184a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d81c      	bhi.n	800137c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	461a      	mov	r2, r3
 8001356:	231f      	movs	r3, #31
 8001358:	4093      	lsls	r3, r2
 800135a:	43db      	mvns	r3, r3
 800135c:	4019      	ands	r1, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
 800137a:	e063      	b.n	8001444 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b09      	cmp	r3, #9
 8001382:	d81e      	bhi.n	80013c2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	3b1e      	subs	r3, #30
 8001398:	221f      	movs	r2, #31
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	4019      	ands	r1, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	fa00 f203 	lsl.w	r2, r0, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
 80013c0:	e040      	b.n	8001444 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b0e      	cmp	r3, #14
 80013c8:	d81e      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	3b3c      	subs	r3, #60	; 0x3c
 80013de:	221f      	movs	r2, #31
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4019      	ands	r1, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	3b3c      	subs	r3, #60	; 0x3c
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	639a      	str	r2, [r3, #56]	; 0x38
 8001406:	e01d      	b.n	8001444 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	3b5a      	subs	r3, #90	; 0x5a
 800141c:	221f      	movs	r2, #31
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	4019      	ands	r1, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	3b5a      	subs	r3, #90	; 0x5a
 8001438:	fa00 f203 	lsl.w	r2, r0, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 80e5 	bne.w	800161e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d91c      	bls.n	8001496 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6999      	ldr	r1, [r3, #24]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3b1e      	subs	r3, #30
 800146e:	2207      	movs	r2, #7
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	4019      	ands	r1, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	6898      	ldr	r0, [r3, #8]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	3b1e      	subs	r3, #30
 8001488:	fa00 f203 	lsl.w	r2, r0, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	619a      	str	r2, [r3, #24]
 8001494:	e019      	b.n	80014ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6959      	ldr	r1, [r3, #20]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	2207      	movs	r2, #7
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6898      	ldr	r0, [r3, #8]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	fa00 f203 	lsl.w	r2, r0, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d84f      	bhi.n	800158c <HAL_ADC_ConfigChannel+0x28c>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001505 	.word	0x08001505
 80014f8:	08001527 	.word	0x08001527
 80014fc:	08001549 	.word	0x08001549
 8001500:	0800156b 	.word	0x0800156b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800150a:	4b94      	ldr	r3, [pc, #592]	; (800175c <HAL_ADC_ConfigChannel+0x45c>)
 800150c:	4013      	ands	r3, r2
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	0691      	lsls	r1, r2, #26
 8001514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001516:	430a      	orrs	r2, r1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001522:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001524:	e07e      	b.n	8001624 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800152c:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_ADC_ConfigChannel+0x45c>)
 800152e:	4013      	ands	r3, r2
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	0691      	lsls	r1, r2, #26
 8001536:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001538:	430a      	orrs	r2, r1
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001544:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001546:	e06d      	b.n	8001624 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800154e:	4b83      	ldr	r3, [pc, #524]	; (800175c <HAL_ADC_ConfigChannel+0x45c>)
 8001550:	4013      	ands	r3, r2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	0691      	lsls	r1, r2, #26
 8001558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800155a:	430a      	orrs	r2, r1
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001566:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001568:	e05c      	b.n	8001624 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001570:	4b7a      	ldr	r3, [pc, #488]	; (800175c <HAL_ADC_ConfigChannel+0x45c>)
 8001572:	4013      	ands	r3, r2
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	0691      	lsls	r1, r2, #26
 800157a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157c:	430a      	orrs	r2, r1
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001588:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800158a:	e04b      	b.n	8001624 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	069b      	lsls	r3, r3, #26
 800159c:	429a      	cmp	r2, r3
 800159e:	d107      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	069b      	lsls	r3, r3, #26
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d107      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	069b      	lsls	r3, r3, #26
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d107      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	069b      	lsls	r3, r3, #26
 8001608:	429a      	cmp	r2, r3
 800160a:	d10a      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800161a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800161c:	e001      	b.n	8001622 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800161e:	bf00      	nop
 8001620:	e000      	b.n	8001624 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001622:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x344>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x344>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_ADC_ConfigChannel+0x346>
 8001644:	2300      	movs	r3, #0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 810a 	bne.w	8001860 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d00f      	beq.n	8001674 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001672:	e049      	b.n	8001708 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	409a      	lsls	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b09      	cmp	r3, #9
 8001694:	d91c      	bls.n	80016d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6999      	ldr	r1, [r3, #24]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	3b1b      	subs	r3, #27
 80016a8:	2207      	movs	r2, #7
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4019      	ands	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6898      	ldr	r0, [r3, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	3b1b      	subs	r3, #27
 80016c2:	fa00 f203 	lsl.w	r2, r0, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e01b      	b.n	8001708 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6959      	ldr	r1, [r3, #20]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	2207      	movs	r2, #7
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4019      	ands	r1, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6898      	ldr	r0, [r3, #8]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_ADC_ConfigChannel+0x460>)
 800170a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b10      	cmp	r3, #16
 8001712:	d105      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001724:	2b11      	cmp	r3, #17
 8001726:	d105      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001738:	2b12      	cmp	r3, #18
 800173a:	f040 8091 	bne.w	8001860 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800173e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 808a 	bne.w	8001860 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001754:	d108      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x468>
 8001756:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_ADC_ConfigChannel+0x464>)
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e008      	b.n	800176e <HAL_ADC_ConfigChannel+0x46e>
 800175c:	83fff000 	.word	0x83fff000
 8001760:	50000300 	.word	0x50000300
 8001764:	50000100 	.word	0x50000100
 8001768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800176c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_ADC_ConfigChannel+0x48e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x48e>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_ADC_ConfigChannel+0x490>
 800178e:	2300      	movs	r3, #0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d150      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001794:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x4b6>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x4b6>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x4b8>
 80017b6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d13c      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d11d      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x500>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017cc:	d118      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_ADC_ConfigChannel+0x578>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_ADC_ConfigChannel+0x57c>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0c9a      	lsrs	r2, r3, #18
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017fe:	e02e      	b.n	800185e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b11      	cmp	r3, #17
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x520>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001810:	d106      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800181a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800181e:	e01e      	b.n	800185e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b12      	cmp	r3, #18
 8001826:	d11a      	bne.n	800185e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001832:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001834:	e013      	b.n	800185e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001848:	e00a      	b.n	8001860 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f043 0220 	orr.w	r2, r3, #32
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800185e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800186c:	4618      	mov	r0, r3
 800186e:	376c      	adds	r7, #108	; 0x6c
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	20000000 	.word	0x20000000
 800187c:	431bde83 	.word	0x431bde83

08001880 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001880:	b480      	push	{r7}
 8001882:	b099      	sub	sp, #100	; 0x64
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001898:	d102      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	e002      	b.n	80018a6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80018a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018a4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0a2      	b.n	80019f6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e09b      	b.n	80019f6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d17f      	bne.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d179      	bne.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80018e2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d040      	beq.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018fe:	035b      	lsls	r3, r3, #13
 8001900:	430b      	orrs	r3, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001906:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d15c      	bne.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800194a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800194c:	2b00      	cmp	r3, #0
 800194e:	d14b      	bne.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001958:	f023 030f 	bic.w	r3, r3, #15
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	6811      	ldr	r1, [r2, #0]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	6892      	ldr	r2, [r2, #8]
 8001964:	430a      	orrs	r2, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800196a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800196c:	e03c      	b.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800196e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001978:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d123      	bne.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80019bc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d112      	bne.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80019c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019ca:	f023 030f 	bic.w	r3, r3, #15
 80019ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019d0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019d2:	e009      	b.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80019e6:	e000      	b.n	80019ea <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019e8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80019f6:	4618      	mov	r0, r3
 80019f8:	3764      	adds	r7, #100	; 0x64
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	50000100 	.word	0x50000100
 8001a08:	50000300 	.word	0x50000300

08001a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <ADC_Enable+0x2c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <ADC_Enable+0x2c>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <ADC_Enable+0x2e>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d143      	bne.n	8001ac6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <ADC_Enable+0xc4>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00d      	beq.n	8001a68 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f043 0210 	orr.w	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e02f      	b.n	8001ac8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a78:	f7fe ff80 	bl	800097c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a7e:	e01b      	b.n	8001ab8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a80:	f7fe ff7c 	bl	800097c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d914      	bls.n	8001ab8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d00d      	beq.n	8001ab8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f043 0210 	orr.w	r2, r3, #16
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e007      	b.n	8001ac8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d1dc      	bne.n	8001a80 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	8000003f 	.word	0x8000003f

08001ad4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d108      	bne.n	8001b00 <ADC_Disable+0x2c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <ADC_Disable+0x2c>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <ADC_Disable+0x2e>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d047      	beq.n	8001b96 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030d 	and.w	r3, r3, #13
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10f      	bne.n	8001b34 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0202 	orr.w	r2, r2, #2
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b2c:	f7fe ff26 	bl	800097c <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b32:	e029      	b.n	8001b88 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f043 0210 	orr.w	r2, r3, #16
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e023      	b.n	8001b98 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b50:	f7fe ff14 	bl	800097c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d914      	bls.n	8001b88 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10d      	bne.n	8001b88 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e007      	b.n	8001b98 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d0dc      	beq.n	8001b50 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff29 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff3e 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff31 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffa2 	bl	8001cfc <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d106      	bne.n	8001de0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001dde:	e005      	b.n	8001dec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e00:	f000 f802 	bl	8001e08 <HAL_SYSTICK_Callback>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e014      	b.n	8001e52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fc75 	bl	8000728 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001e5a:	b480      	push	{r7}
 8001e5c:	b087      	sub	sp, #28
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3308      	adds	r3, #8
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e004      	b.n	8001e8e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	461a      	mov	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	795b      	ldrb	r3, [r3, #5]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DAC_Start+0x16>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e039      	b.n	8001f2e <HAL_DAC_Start+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10f      	bne.n	8001f00 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001eea:	2b3c      	cmp	r3, #60	; 0x3c
 8001eec:	d118      	bne.n	8001f20 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e00f      	b.n	8001f20 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f0a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001f0e:	d107      	bne.n	8001f20 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0202 	orr.w	r2, r2, #2
 8001f1e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	795b      	ldrb	r3, [r3, #5]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_DAC_ConfigChannel+0x20>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e04e      	b.n	8001ffa <HAL_DAC_ConfigChannel+0xbe>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2202      	movs	r2, #2
 8001f66:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <HAL_DAC_ConfigChannel+0xcc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d112      	bne.n	8001fa0 <HAL_DAC_ConfigChannel+0x64>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f80:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	e00e      	b.n	8001fbe <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001fa0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	22c0      	movs	r2, #192	; 0xc0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40007400 	.word	0x40007400

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	e14e      	b.n	80022ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8140 	beq.w	80022b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d005      	beq.n	800204c <HAL_GPIO_Init+0x40>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d017      	beq.n	80020ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d123      	bne.n	800213e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0203 	and.w	r2, r3, #3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 809a 	beq.w	80022b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x1e0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_GPIO_Init+0x2d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <HAL_GPIO_Init+0x2d8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1d8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <HAL_GPIO_Init+0x2dc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1d4>
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e0:	2305      	movs	r3, #5
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021ec:	2300      	movs	r3, #0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021fe:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220c:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002230:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f aea9 	bne.w	800201c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e002      	b.n	8002314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43d9      	mvns	r1, r3
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	400b      	ands	r3, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800235a:	af00      	add	r7, sp, #0
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002364:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f001 b823 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 817d 	beq.w	800268a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002390:	4bbc      	ldr	r3, [pc, #752]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b04      	cmp	r3, #4
 800239a:	d00c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800239c:	4bb9      	ldr	r3, [pc, #740]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d15c      	bne.n	8002462 <HAL_RCC_OscConfig+0x10e>
 80023a8:	4bb6      	ldr	r3, [pc, #728]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d155      	bne.n	8002462 <HAL_RCC_OscConfig+0x10e>
 80023b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x94>
 80023e2:	4ba8      	ldr	r3, [pc, #672]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	e015      	b.n	8002414 <HAL_RCC_OscConfig+0xc0>
 80023e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002400:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002404:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002410:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002418:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800241c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002420:	fa92 f2a2 	rbit	r2, r2
 8002424:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002428:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 811f 	beq.w	8002688 <HAL_RCC_OscConfig+0x334>
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 8116 	bne.w	8002688 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f000 bfaf 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x12e>
 8002474:	4b83      	ldr	r3, [pc, #524]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a82      	ldr	r2, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e036      	b.n	80024f0 <HAL_RCC_OscConfig+0x19c>
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x158>
 8002492:	4b7c      	ldr	r3, [pc, #496]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7b      	ldr	r2, [pc, #492]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b79      	ldr	r3, [pc, #484]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a78      	ldr	r2, [pc, #480]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e021      	b.n	80024f0 <HAL_RCC_OscConfig+0x19c>
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x184>
 80024be:	4b71      	ldr	r3, [pc, #452]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a70      	ldr	r2, [pc, #448]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6e      	ldr	r3, [pc, #440]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6d      	ldr	r2, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0x19c>
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f023 020f 	bic.w	r2, r3, #15
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	495f      	ldr	r1, [pc, #380]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002506:	4313      	orrs	r3, r2
 8002508:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d059      	beq.n	80025ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe fa2f 	bl	800097c <HAL_GetTick>
 800251e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fa2a 	bl	800097c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d902      	bls.n	800253a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	f000 bf43 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
 800253a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800254e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0x218>
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e015      	b.n	8002598 <HAL_RCC_OscConfig+0x244>
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002584:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002588:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025b0:	fab2 f282 	clz	r2, r2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f042 0220 	orr.w	r2, r2, #32
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 021f 	and.w	r2, r2, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f202 	lsl.w	r2, r1, r2
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ab      	beq.n	8002524 <HAL_RCC_OscConfig+0x1d0>
 80025cc:	e05d      	b.n	800268a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe f9d5 	bl	800097c <HAL_GetTick>
 80025d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe f9d0 	bl	800097c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d902      	bls.n	80025ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	f000 bee9 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
 80025ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002602:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_RCC_OscConfig+0x2cc>
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e015      	b.n	800264c <HAL_RCC_OscConfig+0x2f8>
 8002620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002624:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002638:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800263c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCC_OscConfig+0x330>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002650:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002654:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002658:	fa92 f2a2 	rbit	r2, r2
 800265c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002660:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ab      	bne.n	80025d8 <HAL_RCC_OscConfig+0x284>
 8002680:	e003      	b.n	800268a <HAL_RCC_OscConfig+0x336>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 817d 	beq.w	800299a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026a0:	4ba6      	ldr	r3, [pc, #664]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026ac:	4ba3      	ldr	r3, [pc, #652]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d172      	bne.n	800279e <HAL_RCC_OscConfig+0x44a>
 80026b8:	4ba0      	ldr	r3, [pc, #640]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d16c      	bne.n	800279e <HAL_RCC_OscConfig+0x44a>
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_RCC_OscConfig+0x3a0>
 80026ee:	4b93      	ldr	r3, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	e013      	b.n	800271c <HAL_RCC_OscConfig+0x3c8>
 80026f4:	2302      	movs	r3, #2
 80026f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002706:	2302      	movs	r3, #2
 8002708:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800270c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002718:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2202      	movs	r2, #2
 800271e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002722:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002726:	fa92 f2a2 	rbit	r2, r2
 800272a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800272e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002732:	fab2 f282 	clz	r2, r2
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	f042 0220 	orr.w	r2, r2, #32
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	f002 021f 	and.w	r2, r2, #31
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f202 	lsl.w	r2, r1, r2
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCC_OscConfig+0x410>
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d002      	beq.n	8002764 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f000 be2e 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b75      	ldr	r3, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	21f8      	movs	r1, #248	; 0xf8
 800277a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002782:	fa91 f1a1 	rbit	r1, r1
 8002786:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800278a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800278e:	fab1 f181 	clz	r1, r1
 8002792:	b2c9      	uxtb	r1, r1
 8002794:	408b      	lsls	r3, r1
 8002796:	4969      	ldr	r1, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279c:	e0fd      	b.n	800299a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8088 	beq.w	80028c0 <HAL_RCC_OscConfig+0x56c>
 80027b0:	2301      	movs	r3, #1
 80027b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	461a      	mov	r2, r3
 80027d8:	2301      	movs	r3, #1
 80027da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe f8ce 	bl	800097c <HAL_GetTick>
 80027e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe f8c9 	bl	800097c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f000 bde2 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800280e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x4d8>
 8002826:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e013      	b.n	8002854 <HAL_RCC_OscConfig+0x500>
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002844:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2202      	movs	r2, #2
 8002856:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800285a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800285e:	fa92 f2a2 	rbit	r2, r2
 8002862:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002866:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0af      	beq.n	80027e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	21f8      	movs	r1, #248	; 0xf8
 800289c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028a4:	fa91 f1a1 	rbit	r1, r1
 80028a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028b0:	fab1 f181 	clz	r1, r1
 80028b4:	b2c9      	uxtb	r1, r1
 80028b6:	408b      	lsls	r3, r1
 80028b8:	4920      	ldr	r1, [pc, #128]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
 80028be:	e06c      	b.n	800299a <HAL_RCC_OscConfig+0x646>
 80028c0:	2301      	movs	r3, #1
 80028c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe f846 	bl	800097c <HAL_GetTick>
 80028f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe f841 	bl	800097c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d902      	bls.n	800290c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	f000 bd5a 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
 800290c:	2302      	movs	r3, #2
 800290e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800291e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d104      	bne.n	8002940 <HAL_RCC_OscConfig+0x5ec>
 8002936:	4b01      	ldr	r3, [pc, #4]	; (800293c <HAL_RCC_OscConfig+0x5e8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	e015      	b.n	8002968 <HAL_RCC_OscConfig+0x614>
 800293c:	40021000 	.word	0x40021000
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002952:	2302      	movs	r3, #2
 8002954:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002958:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002964:	4bc8      	ldr	r3, [pc, #800]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2202      	movs	r2, #2
 800296a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800296e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002972:	fa92 f2a2 	rbit	r2, r2
 8002976:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800297a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800297e:	fab2 f282 	clz	r2, r2
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f002 021f 	and.w	r2, r2, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ad      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8110 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d079      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x760>
 80029c0:	2301      	movs	r3, #1
 80029c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4bab      	ldr	r3, [pc, #684]	; (8002c8c <HAL_RCC_OscConfig+0x938>)
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	461a      	mov	r2, r3
 80029e6:	2301      	movs	r3, #1
 80029e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fd ffc7 	bl	800097c <HAL_GetTick>
 80029ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fd ffc2 	bl	800097c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d902      	bls.n	8002a0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	f000 bcdb 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a48:	2202      	movs	r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f2a3 	rbit	r2, r3
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a64:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a70:	2102      	movs	r1, #2
 8002a72:	6019      	str	r1, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f1a3 	rbit	r1, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a8a:	6019      	str	r1, [r3, #0]
  return result;
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0a0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x6a0>
 8002ab2:	e08d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x87c>
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ad6:	601a      	str	r2, [r3, #0]
  return result;
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ae0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x938>)
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	461a      	mov	r2, r3
 8002af2:	2300      	movs	r3, #0
 8002af4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7fd ff41 	bl	800097c <HAL_GetTick>
 8002afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fd ff3c 	bl	800097c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d902      	bls.n	8002b16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	f000 bc55 	b.w	80033c0 <HAL_RCC_OscConfig+0x106c>
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b1e:	2202      	movs	r2, #2
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b42:	2202      	movs	r2, #2
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fa93 f2a3 	rbit	r2, r3
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b66:	2202      	movs	r2, #2
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b8e:	2102      	movs	r1, #2
 8002b90:	6019      	str	r1, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f1a3 	rbit	r1, r3
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ba8:	6019      	str	r1, [r3, #0]
  return result;
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d197      	bne.n	8002b00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 81a1 	beq.w	8002f28 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	61d3      	str	r3, [r2, #28]
 8002c04:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCC_OscConfig+0x93c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_RCC_OscConfig+0x93c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_RCC_OscConfig+0x93c>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fd fe9d 	bl	800097c <HAL_GetTick>
 8002c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c46:	e009      	b.n	8002c5c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fd fe98 	bl	800097c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e3b1      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_RCC_OscConfig+0x93c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCC_OscConfig+0x940>
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a02      	ldr	r2, [pc, #8]	; (8002c88 <HAL_RCC_OscConfig+0x934>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	e03c      	b.n	8002d00 <HAL_RCC_OscConfig+0x9ac>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	10908120 	.word	0x10908120
 8002c90:	40007000 	.word	0x40007000
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x96a>
 8002ca4:	4bc1      	ldr	r3, [pc, #772]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4ac0      	ldr	r2, [pc, #768]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	4bbe      	ldr	r3, [pc, #760]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4abd      	ldr	r2, [pc, #756]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e020      	b.n	8002d00 <HAL_RCC_OscConfig+0x9ac>
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x994>
 8002cce:	4bb7      	ldr	r3, [pc, #732]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4ab6      	ldr	r2, [pc, #728]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	4bb4      	ldr	r3, [pc, #720]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4ab3      	ldr	r2, [pc, #716]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0x9ac>
 8002ce8:	4bb0      	ldr	r3, [pc, #704]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4aaf      	ldr	r2, [pc, #700]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6213      	str	r3, [r2, #32]
 8002cf4:	4bad      	ldr	r3, [pc, #692]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4aac      	ldr	r2, [pc, #688]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	f023 0304 	bic.w	r3, r3, #4
 8002cfe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8081 	beq.w	8002e14 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d12:	f7fd fe33 	bl	800097c <HAL_GetTick>
 8002d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fd fe2e 	bl	800097c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e345      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fa93 f2a3 	rbit	r2, r3
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d60:	2202      	movs	r2, #2
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d7a:	601a      	str	r2, [r3, #0]
  return result;
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_OscConfig+0xa4c>
 8002d9a:	4b84      	ldr	r3, [pc, #528]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	e013      	b.n	8002dc8 <HAL_RCC_OscConfig+0xa74>
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002da8:	2202      	movs	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	4b79      	ldr	r3, [pc, #484]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dcc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	6011      	str	r1, [r2, #0]
 8002dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fa92 f1a2 	rbit	r1, r2
 8002de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dea:	6011      	str	r1, [r2, #0]
  return result;
 8002dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d084      	beq.n	8002d1c <HAL_RCC_OscConfig+0x9c8>
 8002e12:	e07f      	b.n	8002f14 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e14:	f7fd fdb2 	bl	800097c <HAL_GetTick>
 8002e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fd fdad 	bl	800097c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e2c4      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e3e:	2202      	movs	r2, #2
 8002e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	fa93 f2a3 	rbit	r2, r3
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e62:	2202      	movs	r2, #2
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e7c:	601a      	str	r2, [r3, #0]
  return result;
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RCC_OscConfig+0xb4e>
 8002e9c:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	e013      	b.n	8002eca <HAL_RCC_OscConfig+0xb76>
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eaa:	2202      	movs	r2, #2
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ece:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fa92 f1a2 	rbit	r1, r2
 8002ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d184      	bne.n	8002e1e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f14:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8242 	beq.w	80033be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_RCC_OscConfig+0xc58>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	f000 8213 	beq.w	800336e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	f040 8162 	bne.w	800321e <HAL_RCC_OscConfig+0xeca>
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f7e:	601a      	str	r2, [r3, #0]
  return result;
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fcec 	bl	800097c <HAL_GetTick>
 8002fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	e00c      	b.n	8002fc4 <HAL_RCC_OscConfig+0xc70>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fd fce4 	bl	800097c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1fd      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f2a3 	rbit	r2, r3
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fe8:	601a      	str	r2, [r3, #0]
  return result;
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ff2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_RCC_OscConfig+0xcba>
 8003008:	4bb0      	ldr	r3, [pc, #704]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e027      	b.n	800305e <HAL_RCC_OscConfig+0xd0a>
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800303c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	fa93 f2a3 	rbit	r2, r3
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4b9c      	ldr	r3, [pc, #624]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003062:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003066:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800306a:	6011      	str	r1, [r2, #0]
 800306c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003070:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	fa92 f1a2 	rbit	r1, r2
 800307a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003082:	6011      	str	r1, [r2, #0]
  return result;
 8003084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003088:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d182      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	430b      	orrs	r3, r1
 80030cc:	497f      	ldr	r1, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030f6:	601a      	str	r2, [r3, #0]
  return result;
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003100:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	461a      	mov	r2, r3
 8003114:	2301      	movs	r3, #1
 8003116:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fd fc30 	bl	800097c <HAL_GetTick>
 800311c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003120:	e009      	b.n	8003136 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fd fc2b 	bl	800097c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e144      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800313e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800315a:	601a      	str	r2, [r3, #0]
  return result;
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003164:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_RCC_OscConfig+0xe2c>
 800317a:	4b54      	ldr	r3, [pc, #336]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e027      	b.n	80031d0 <HAL_RCC_OscConfig+0xe7c>
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fa93 f2a3 	rbit	r2, r3
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fa92 f1a2 	rbit	r1, r2
 80031ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031f4:	6011      	str	r1, [r2, #0]
  return result;
 80031f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f042 0220 	orr.w	r2, r2, #32
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	f002 021f 	and.w	r2, r2, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d082      	beq.n	8003122 <HAL_RCC_OscConfig+0xdce>
 800321c:	e0cf      	b.n	80033be <HAL_RCC_OscConfig+0x106a>
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800322a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003242:	601a      	str	r2, [r3, #0]
  return result;
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800324c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	461a      	mov	r2, r3
 8003260:	2300      	movs	r3, #0
 8003262:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fb8a 	bl	800097c <HAL_GetTick>
 8003268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	e009      	b.n	8003282 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326e:	f7fd fb85 	bl	800097c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e09e      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800328a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032a6:	601a      	str	r2, [r3, #0]
  return result;
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d104      	bne.n	80032d0 <HAL_RCC_OscConfig+0xf7c>
 80032c6:	4b01      	ldr	r3, [pc, #4]	; (80032cc <HAL_RCC_OscConfig+0xf78>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e029      	b.n	8003320 <HAL_RCC_OscConfig+0xfcc>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fa93 f2a3 	rbit	r2, r3
 80032ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	fa93 f2a3 	rbit	r2, r3
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x1078>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003324:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003328:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800332c:	6011      	str	r1, [r2, #0]
 800332e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003332:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	fa92 f1a2 	rbit	r1, r2
 800333c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003340:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003344:	6011      	str	r1, [r2, #0]
  return result;
 8003346:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800334a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	fab2 f282 	clz	r2, r2
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f042 0220 	orr.w	r2, r2, #32
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f002 021f 	and.w	r2, r2, #31
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f202 	lsl.w	r2, r1, r2
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d180      	bne.n	800326e <HAL_RCC_OscConfig+0xf1a>
 800336c:	e027      	b.n	80033be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01e      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCC_OscConfig+0x1078>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800338a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800338e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10b      	bne.n	80033ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b09e      	sub	sp, #120	; 0x78
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e162      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b90      	ldr	r3, [pc, #576]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b8d      	ldr	r3, [pc, #564]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	498b      	ldr	r1, [pc, #556]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b89      	ldr	r3, [pc, #548]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e14a      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b82      	ldr	r3, [pc, #520]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	497f      	ldr	r1, [pc, #508]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80dc 	beq.w	80035fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d13c      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xf6>
 800344c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003450:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d102      	bne.n	8003476 <HAL_RCC_ClockConfig+0xa6>
 8003470:	4b6f      	ldr	r3, [pc, #444]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	e00f      	b.n	8003496 <HAL_RCC_ClockConfig+0xc6>
 8003476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800347a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	667b      	str	r3, [r7, #100]	; 0x64
 8003484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003488:	663b      	str	r3, [r7, #96]	; 0x60
 800348a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003492:	4b67      	ldr	r3, [pc, #412]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349a:	65ba      	str	r2, [r7, #88]	; 0x58
 800349c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800349e:	fa92 f2a2 	rbit	r2, r2
 80034a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d17b      	bne.n	80035ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0f3      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d13c      	bne.n	8003548 <HAL_RCC_ClockConfig+0x178>
 80034ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x128>
 80034f2:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e00f      	b.n	8003518 <HAL_RCC_ClockConfig+0x148>
 80034f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	647b      	str	r3, [r7, #68]	; 0x44
 8003506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350a:	643b      	str	r3, [r7, #64]	; 0x40
 800350c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351c:	63ba      	str	r2, [r7, #56]	; 0x38
 800351e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003520:	fa92 f2a2 	rbit	r2, r2
 8003524:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f002 021f 	and.w	r2, r2, #31
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13a      	bne.n	80035ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b2      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 8003548:	2302      	movs	r3, #2
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_RCC_ClockConfig+0x1a0>
 800356a:	4b31      	ldr	r3, [pc, #196]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	e00d      	b.n	800358c <HAL_RCC_ClockConfig+0x1bc>
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2202      	movs	r2, #2
 800358e:	61ba      	str	r2, [r7, #24]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	fa92 f2a2 	rbit	r2, r2
 8003596:	617a      	str	r2, [r7, #20]
  return result;
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	fab2 f282 	clz	r2, r2
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f042 0220 	orr.w	r2, r2, #32
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	f002 021f 	and.w	r2, r2, #31
 80035aa:	2101      	movs	r1, #1
 80035ac:	fa01 f202 	lsl.w	r2, r1, r2
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e079      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	491a      	ldr	r1, [pc, #104]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035cc:	f7fd f9d6 	bl	800097c <HAL_GetTick>
 80035d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fd f9d2 	bl	800097c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e061      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d214      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	4906      	ldr	r1, [pc, #24]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_RCC_ClockConfig+0x25c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e040      	b.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	491a      	ldr	r1, [pc, #104]	; (80036b8 <HAL_RCC_ClockConfig+0x2e8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x2e8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003672:	f000 f829 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003676:	4601      	mov	r1, r0
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <HAL_RCC_ClockConfig+0x2e8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003680:	22f0      	movs	r2, #240	; 0xf0
 8003682:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	60fa      	str	r2, [r7, #12]
  return result;
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	40d3      	lsrs	r3, r2
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x2ec>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
 800369a:	fa21 f303 	lsr.w	r3, r1, r3
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCC_ClockConfig+0x2f0>)
 80036a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCC_ClockConfig+0x2f4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd f924 	bl	80008f4 <HAL_InitTick>
  
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3778      	adds	r7, #120	; 0x78
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08004e8c 	.word	0x08004e8c
 80036c0:	20000000 	.word	0x20000000
 80036c4:	20000004 	.word	0x20000004

080036c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b08b      	sub	sp, #44	; 0x2c
 80036cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x30>
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x36>
 80036f6:	e03c      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_GetSysClockFreq+0xc4>)
 80036fa:	623b      	str	r3, [r7, #32]
      break;
 80036fc:	e03c      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003704:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003708:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	fa92 f2a2 	rbit	r2, r2
 8003710:	607a      	str	r2, [r7, #4]
  return result;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	fab2 f282 	clz	r2, r2
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	40d3      	lsrs	r3, r2
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_RCC_GetSysClockFreq+0xc8>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003722:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	220f      	movs	r2, #15
 800372c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	fa92 f2a2 	rbit	r2, r2
 8003734:	60fa      	str	r2, [r7, #12]
  return result;
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	40d3      	lsrs	r3, r2
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	fbb2 f2f3 	udiv	r2, r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	e004      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	623b      	str	r3, [r7, #32]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003774:	623b      	str	r3, [r7, #32]
      break;
 8003776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003778:	6a3b      	ldr	r3, [r7, #32]
}
 800377a:	4618      	mov	r0, r3
 800377c:	372c      	adds	r7, #44	; 0x2c
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	007a1200 	.word	0x007a1200
 8003790:	08004ea4 	.word	0x08004ea4
 8003794:	08004eb4 	.word	0x08004eb4
 8003798:	003d0900 	.word	0x003d0900

0800379c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037ba:	f7ff ffef 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037be:	4601      	mov	r1, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	fa92 f2a2 	rbit	r2, r2
 80037d4:	603a      	str	r2, [r7, #0]
  return result;
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	fab2 f282 	clz	r2, r2
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	40d3      	lsrs	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08004e9c 	.word	0x08004e9c

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037fe:	f7ff ffcd 	bl	800379c <HAL_RCC_GetHCLKFreq>
 8003802:	4601      	mov	r1, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800380c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003810:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	fa92 f2a2 	rbit	r2, r2
 8003818:	603a      	str	r2, [r7, #0]
  return result;
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	40d3      	lsrs	r3, r2
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	08004e9c 	.word	0x08004e9c

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b092      	sub	sp, #72	; 0x48
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800384c:	2300      	movs	r3, #0
 800384e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80cd 	beq.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003860:	4b8e      	ldr	r3, [pc, #568]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10e      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386c:	4b8b      	ldr	r3, [pc, #556]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4a8a      	ldr	r2, [pc, #552]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003876:	61d3      	str	r3, [r2, #28]
 8003878:	4b88      	ldr	r3, [pc, #544]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	4b85      	ldr	r3, [pc, #532]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003896:	4b82      	ldr	r3, [pc, #520]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a81      	ldr	r2, [pc, #516]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a2:	f7fd f86b 	bl	800097c <HAL_GetTick>
 80038a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a8:	e008      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038aa:	f7fd f867 	bl	800097c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0ea      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	4b78      	ldr	r3, [pc, #480]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c8:	4b74      	ldr	r3, [pc, #464]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d07d      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d076      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e6:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	4b66      	ldr	r3, [pc, #408]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	461a      	mov	r2, r3
 8003910:	2301      	movs	r3, #1
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	461a      	mov	r2, r3
 8003934:	2300      	movs	r3, #0
 8003936:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d045      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fd f818 	bl	800097c <HAL_GetTick>
 800394c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fd f814 	bl	800097c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e095      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003966:	2302      	movs	r3, #2
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	2302      	movs	r3, #2
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	61fb      	str	r3, [r7, #28]
  return result;
 800397e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d102      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003994:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	e007      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800399a:	2302      	movs	r3, #2
 800399c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2202      	movs	r2, #2
 80039ac:	613a      	str	r2, [r7, #16]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	fa92 f2a2 	rbit	r2, r2
 80039b4:	60fa      	str	r2, [r7, #12]
  return result;
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	fab2 f282 	clz	r2, r2
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	f002 021f 	and.w	r2, r2, #31
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f202 	lsl.w	r2, r1, r2
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0bd      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	492e      	ldr	r1, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a06:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4922      	ldr	r1, [pc, #136]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	f023 0210 	bic.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	491a      	ldr	r1, [pc, #104]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	4913      	ldr	r1, [pc, #76]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	490b      	ldr	r1, [pc, #44]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4904      	ldr	r1, [pc, #16]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3748      	adds	r7, #72	; 0x48
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	10908100 	.word	0x10908100

08003aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e040      	b.n	8003b42 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_TIM_Base_Start_IT+0xa8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x58>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d009      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x58>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_Base_Start_IT+0xac>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x58>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_TIM_Base_Start_IT+0xb0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d115      	bne.n	8003b2c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_TIM_Base_Start_IT+0xb4>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d015      	beq.n	8003b3e <HAL_TIM_Base_Start_IT+0x96>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d011      	beq.n	8003b3e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	e008      	b.n	8003b3e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	00010007 	.word	0x00010007

08003b60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e049      	b.n	8003c06 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fdf8 	bl	800077c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 f9f6 	bl	8003f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d122      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11b      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0202 	mvn.w	r2, #2
 8003c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f97f 	bl	8003f54 <HAL_TIM_IC_CaptureCallback>
 8003c56:	e005      	b.n	8003c64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f971 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f982 	bl	8003f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d122      	bne.n	8003cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d11b      	bne.n	8003cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0204 	mvn.w	r2, #4
 8003c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f955 	bl	8003f54 <HAL_TIM_IC_CaptureCallback>
 8003caa:	e005      	b.n	8003cb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f947 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f958 	bl	8003f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d122      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11b      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0208 	mvn.w	r2, #8
 8003ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f92b 	bl	8003f54 <HAL_TIM_IC_CaptureCallback>
 8003cfe:	e005      	b.n	8003d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f91d 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f92e 	bl	8003f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d122      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d11b      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f06f 0210 	mvn.w	r2, #16
 8003d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f901 	bl	8003f54 <HAL_TIM_IC_CaptureCallback>
 8003d52:	e005      	b.n	8003d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8f3 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f904 	bl	8003f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0201 	mvn.w	r2, #1
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fc fc27 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fc7f 	bl	80046bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b80      	cmp	r3, #128	; 0x80
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fc72 	bl	80046d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8b2 	bl	8003f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d10e      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d107      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0220 	mvn.w	r2, #32
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fc32 	bl	80046a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e066      	b.n	8003f38 <HAL_TIM_OC_ConfigChannel+0xec>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b14      	cmp	r3, #20
 8003e76:	d857      	bhi.n	8003f28 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003ed5 	.word	0x08003ed5
 8003e84:	08003f29 	.word	0x08003f29
 8003e88:	08003f29 	.word	0x08003f29
 8003e8c:	08003f29 	.word	0x08003f29
 8003e90:	08003ee3 	.word	0x08003ee3
 8003e94:	08003f29 	.word	0x08003f29
 8003e98:	08003f29 	.word	0x08003f29
 8003e9c:	08003f29 	.word	0x08003f29
 8003ea0:	08003ef1 	.word	0x08003ef1
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	08003f29 	.word	0x08003f29
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003eff 	.word	0x08003eff
 8003eb4:	08003f29 	.word	0x08003f29
 8003eb8:	08003f29 	.word	0x08003f29
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f29 	.word	0x08003f29
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f1b 	.word	0x08003f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f8d0 	bl	8004080 <TIM_OC1_SetConfig>
      break;
 8003ee0:	e025      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f94f 	bl	800418c <TIM_OC2_SetConfig>
      break;
 8003eee:	e01e      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9c8 	bl	800428c <TIM_OC3_SetConfig>
      break;
 8003efc:	e017      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fa3f 	bl	8004388 <TIM_OC4_SetConfig>
      break;
 8003f0a:	e010      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fa9c 	bl	8004450 <TIM_OC5_SetConfig>
      break;
 8003f18:	e009      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 faf3 	bl	800450c <TIM_OC6_SetConfig>
      break;
 8003f26:	e002      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a32      	ldr	r2, [pc, #200]	; (800406c <TIM_Base_SetConfig+0xdc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d007      	beq.n	8003fb8 <TIM_Base_SetConfig+0x28>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0x28>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <TIM_Base_SetConfig+0xe0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d108      	bne.n	8003fca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <TIM_Base_SetConfig+0xdc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <TIM_Base_SetConfig+0x6a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d00f      	beq.n	8003ffa <TIM_Base_SetConfig+0x6a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a24      	ldr	r2, [pc, #144]	; (8004070 <TIM_Base_SetConfig+0xe0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_Base_SetConfig+0x6a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a23      	ldr	r2, [pc, #140]	; (8004074 <TIM_Base_SetConfig+0xe4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_Base_SetConfig+0x6a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a22      	ldr	r2, [pc, #136]	; (8004078 <TIM_Base_SetConfig+0xe8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_Base_SetConfig+0x6a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a21      	ldr	r2, [pc, #132]	; (800407c <TIM_Base_SetConfig+0xec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d108      	bne.n	800400c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <TIM_Base_SetConfig+0xdc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_Base_SetConfig+0xc0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <TIM_Base_SetConfig+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0xc0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <TIM_Base_SetConfig+0xe8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0xc0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0c      	ldr	r2, [pc, #48]	; (800407c <TIM_Base_SetConfig+0xec>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40000400 	.word	0x40000400
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0201 	bic.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0302 	bic.w	r3, r3, #2
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <TIM_OC1_SetConfig+0xfc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_OC1_SetConfig+0x78>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a27      	ldr	r2, [pc, #156]	; (8004180 <TIM_OC1_SetConfig+0x100>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_OC1_SetConfig+0x78>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_OC1_SetConfig+0x104>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC1_SetConfig+0x78>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a25      	ldr	r2, [pc, #148]	; (8004188 <TIM_OC1_SetConfig+0x108>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d10c      	bne.n	8004112 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0308 	bic.w	r3, r3, #8
 80040fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <TIM_OC1_SetConfig+0xfc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_OC1_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <TIM_OC1_SetConfig+0x100>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_OC1_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <TIM_OC1_SetConfig+0x104>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_OC1_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <TIM_OC1_SetConfig+0x108>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d111      	bne.n	8004156 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800

0800418c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0210 	bic.w	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a24      	ldr	r2, [pc, #144]	; (800427c <TIM_OC2_SetConfig+0xf0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10d      	bne.n	800420c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a1b      	ldr	r2, [pc, #108]	; (800427c <TIM_OC2_SetConfig+0xf0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_OC2_SetConfig+0xa0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <TIM_OC2_SetConfig+0xf4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC2_SetConfig+0xa0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <TIM_OC2_SetConfig+0xf8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC2_SetConfig+0xa0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <TIM_OC2_SetConfig+0xfc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d113      	bne.n	8004254 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004232:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800423a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40014000 	.word	0x40014000
 8004284:	40014400 	.word	0x40014400
 8004288:	40014800 	.word	0x40014800

0800428c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a23      	ldr	r2, [pc, #140]	; (8004378 <TIM_OC3_SetConfig+0xec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10d      	bne.n	800430a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004308:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <TIM_OC3_SetConfig+0xec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00b      	beq.n	800432a <TIM_OC3_SetConfig+0x9e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a19      	ldr	r2, [pc, #100]	; (800437c <TIM_OC3_SetConfig+0xf0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_OC3_SetConfig+0x9e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <TIM_OC3_SetConfig+0xf4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_OC3_SetConfig+0x9e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <TIM_OC3_SetConfig+0xf8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d113      	bne.n	8004352 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	621a      	str	r2, [r3, #32]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <TIM_OC4_SetConfig+0xb8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_OC4_SetConfig+0x7c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a15      	ldr	r2, [pc, #84]	; (8004444 <TIM_OC4_SetConfig+0xbc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_OC4_SetConfig+0x7c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a14      	ldr	r2, [pc, #80]	; (8004448 <TIM_OC4_SetConfig+0xc0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_OC4_SetConfig+0x7c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <TIM_OC4_SetConfig+0xc4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d109      	bne.n	8004418 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800440a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800

08004450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004494:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <TIM_OC5_SetConfig+0xac>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_OC5_SetConfig+0x72>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <TIM_OC5_SetConfig+0xb0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_OC5_SetConfig+0x72>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC5_SetConfig+0xb4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC5_SetConfig+0x72>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <TIM_OC5_SetConfig+0xb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d109      	bne.n	80044d6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	051b      	lsls	r3, r3, #20
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <TIM_OC6_SetConfig+0xb0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00b      	beq.n	8004580 <TIM_OC6_SetConfig+0x74>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <TIM_OC6_SetConfig+0xb4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <TIM_OC6_SetConfig+0x74>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <TIM_OC6_SetConfig+0xb8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_OC6_SetConfig+0x74>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <TIM_OC6_SetConfig+0xbc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d109      	bne.n	8004594 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	029b      	lsls	r3, r3, #10
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e054      	b.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a24      	ldr	r2, [pc, #144]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004614:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d009      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10c      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40014000 	.word	0x40014000

080046a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e040      	b.n	8004778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc f858 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f82c 	bl	8004780 <UART_SetConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e022      	b.n	8004778 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f956 	bl	80049ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800474e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800475e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9dd 	bl	8004b30 <UART_CheckIdleState>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b8a      	ldr	r3, [pc, #552]	; (80049d4 <UART_SetConfig+0x254>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	6979      	ldr	r1, [r7, #20]
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a78      	ldr	r2, [pc, #480]	; (80049d8 <UART_SetConfig+0x258>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <UART_SetConfig+0xbe>
 80047fc:	4b77      	ldr	r3, [pc, #476]	; (80049dc <UART_SetConfig+0x25c>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d817      	bhi.n	8004838 <UART_SetConfig+0xb8>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <UART_SetConfig+0x90>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004821 	.word	0x08004821
 8004814:	0800482d 	.word	0x0800482d
 8004818:	08004833 	.word	0x08004833
 800481c:	08004827 	.word	0x08004827
 8004820:	2300      	movs	r3, #0
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e01d      	b.n	8004862 <UART_SetConfig+0xe2>
 8004826:	2302      	movs	r3, #2
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e01a      	b.n	8004862 <UART_SetConfig+0xe2>
 800482c:	2304      	movs	r3, #4
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e017      	b.n	8004862 <UART_SetConfig+0xe2>
 8004832:	2308      	movs	r3, #8
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e014      	b.n	8004862 <UART_SetConfig+0xe2>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e011      	b.n	8004862 <UART_SetConfig+0xe2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a67      	ldr	r2, [pc, #412]	; (80049e0 <UART_SetConfig+0x260>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d102      	bne.n	800484e <UART_SetConfig+0xce>
 8004848:	2300      	movs	r3, #0
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e009      	b.n	8004862 <UART_SetConfig+0xe2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a64      	ldr	r2, [pc, #400]	; (80049e4 <UART_SetConfig+0x264>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d102      	bne.n	800485e <UART_SetConfig+0xde>
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e001      	b.n	8004862 <UART_SetConfig+0xe2>
 800485e:	2310      	movs	r3, #16
 8004860:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d15a      	bne.n	8004922 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800486c:	7ffb      	ldrb	r3, [r7, #31]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d827      	bhi.n	80048c2 <UART_SetConfig+0x142>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0xf8>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048a5 	.word	0x080048a5
 8004880:	080048ad 	.word	0x080048ad
 8004884:	080048c3 	.word	0x080048c3
 8004888:	080048b3 	.word	0x080048b3
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048c3 	.word	0x080048c3
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048bb 	.word	0x080048bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fe ff8a 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 80048a0:	61b8      	str	r0, [r7, #24]
        break;
 80048a2:	e013      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7fe ffa8 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80048a8:	61b8      	str	r0, [r7, #24]
        break;
 80048aa:	e00f      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b4e      	ldr	r3, [pc, #312]	; (80049e8 <UART_SetConfig+0x268>)
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e00c      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7fe ff09 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 80048b6:	61b8      	str	r0, [r7, #24]
        break;
 80048b8:	e008      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e004      	b.n	80048cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d074      	beq.n	80049bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	005a      	lsls	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d916      	bls.n	800491c <UART_SetConfig+0x19c>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d212      	bcs.n	800491c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f023 030f 	bic.w	r3, r3, #15
 80048fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	b29a      	uxth	r2, r3
 800490c:	89fb      	ldrh	r3, [r7, #14]
 800490e:	4313      	orrs	r3, r2
 8004910:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	89fa      	ldrh	r2, [r7, #14]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	e04f      	b.n	80049bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	77bb      	strb	r3, [r7, #30]
 8004920:	e04c      	b.n	80049bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	7ffb      	ldrb	r3, [r7, #31]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d828      	bhi.n	800497a <UART_SetConfig+0x1fa>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x1b0>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe ff2e 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004958:	61b8      	str	r0, [r7, #24]
        break;
 800495a:	e013      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe ff4c 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 8004960:	61b8      	str	r0, [r7, #24]
        break;
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <UART_SetConfig+0x268>)
 8004966:	61bb      	str	r3, [r7, #24]
        break;
 8004968:	e00c      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fe fead 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 800496e:	61b8      	str	r0, [r7, #24]
        break;
 8004970:	e008      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	61bb      	str	r3, [r7, #24]
        break;
 8004978:	e004      	b.n	8004984 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	77bb      	strb	r3, [r7, #30]
        break;
 8004982:	bf00      	nop
    }

    if (pclk != 0U)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085a      	lsrs	r2, r3, #1
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	441a      	add	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b0f      	cmp	r3, #15
 80049a2:	d909      	bls.n	80049b8 <UART_SetConfig+0x238>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d205      	bcs.n	80049b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	e001      	b.n	80049bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	efff69f3 	.word	0xefff69f3
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40004400 	.word	0x40004400
 80049e4:	40004800 	.word	0x40004800
 80049e8:	007a1200 	.word	0x007a1200

080049ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d10a      	bne.n	8004b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b098      	sub	sp, #96	; 0x60
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b40:	f7fb ff1c 	bl	800097c <HAL_GetTick>
 8004b44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d12e      	bne.n	8004bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f88c 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d021      	beq.n	8004bb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b82:	653b      	str	r3, [r7, #80]	; 0x50
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e6      	bne.n	8004b6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e062      	b.n	8004c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d149      	bne.n	8004c54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f856 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d03c      	beq.n	8004c54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	623b      	str	r3, [r7, #32]
   return(result);
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2c:	61fa      	str	r2, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e011      	b.n	8004c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3758      	adds	r7, #88	; 0x58
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c90:	e049      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d045      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fb fe6f 	bl	800097c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e048      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d031      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d110      	bne.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f838 	bl	8004d4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e029      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d00:	d111      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f81e 	bl	8004d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d0a6      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b095      	sub	sp, #84	; 0x54
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
 8004d76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e5      	bne.n	8004d88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d118      	bne.n	8004df6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e6      	bne.n	8004dc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e0a:	bf00      	nop
 8004e0c:	3754      	adds	r7, #84	; 0x54
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <__libc_init_array>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	4d0d      	ldr	r5, [pc, #52]	; (8004e50 <__libc_init_array+0x38>)
 8004e1c:	4c0d      	ldr	r4, [pc, #52]	; (8004e54 <__libc_init_array+0x3c>)
 8004e1e:	1b64      	subs	r4, r4, r5
 8004e20:	10a4      	asrs	r4, r4, #2
 8004e22:	2600      	movs	r6, #0
 8004e24:	42a6      	cmp	r6, r4
 8004e26:	d109      	bne.n	8004e3c <__libc_init_array+0x24>
 8004e28:	4d0b      	ldr	r5, [pc, #44]	; (8004e58 <__libc_init_array+0x40>)
 8004e2a:	4c0c      	ldr	r4, [pc, #48]	; (8004e5c <__libc_init_array+0x44>)
 8004e2c:	f000 f818 	bl	8004e60 <_init>
 8004e30:	1b64      	subs	r4, r4, r5
 8004e32:	10a4      	asrs	r4, r4, #2
 8004e34:	2600      	movs	r6, #0
 8004e36:	42a6      	cmp	r6, r4
 8004e38:	d105      	bne.n	8004e46 <__libc_init_array+0x2e>
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e40:	4798      	blx	r3
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7ee      	b.n	8004e24 <__libc_init_array+0xc>
 8004e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4a:	4798      	blx	r3
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	e7f2      	b.n	8004e36 <__libc_init_array+0x1e>
 8004e50:	08004ec4 	.word	0x08004ec4
 8004e54:	08004ec4 	.word	0x08004ec4
 8004e58:	08004ec4 	.word	0x08004ec4
 8004e5c:	08004ec8 	.word	0x08004ec8

08004e60 <_init>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr

08004e6c <_fini>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr
